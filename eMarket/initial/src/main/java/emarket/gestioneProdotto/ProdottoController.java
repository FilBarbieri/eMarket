package emarket.gestioneProdotto;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@Controller
public class ProdottoController implements WebMvcConfigurer, GestioneProdottoIF{

  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private ProdottoRepository prodottoRepository;
  
  
  public void addViewControllers(ViewControllerRegistry registry) {
    registry.addViewController("/index").setViewName("index");
    registry.addViewController("/").setViewName("index");
    registry.addViewController("/visualizzaProdotto").setViewName("prodotto");
  }

  //HTML
  @GetMapping ("/visualizzaProdotto")
  public String visualizzaProdotto(Prodotto prodotto, Model model) {
    model.addAttribute("dati", getAllP());
    return "prodotto";
  }
  
  @PostMapping("/inserimentoProdotto")
  public String inserimentoProdotto(Prodotto prodotto) {
    insertP(prodotto);
    return "redirect:/visualizzaProdotto";
  }
  
  @PostMapping("/modificaProdotto")
  public String modificaProdotto(@RequestParam (value ="idP")Long id,
      @RequestParam (value ="nome")String nome,
      @RequestParam (value ="prezzo")Float prezzo,
      @RequestParam (value ="qt") Integer qt,
      @RequestParam (value ="qm") Integer qm) {

    Prodotto prodotto = new Prodotto(nome, prezzo, qt, qm);
    modifyP(id, prodotto);

    return "redirect:/visualizzaProdotto";
  }
  
  @PostMapping("/cancellaProdotto")
  public String cancellazioneProdotto(@RequestParam (value ="idP")Long id) {
    //prodottoRepository.deleteById(id);
    deleteP(id);
    return "redirect:/visualizzaProdotto";
  }
  
  //REST API
  @GetMapping ("/visualizza_Prodotto")
  public @ResponseBody Iterable<Prodotto> getAllP() {
    return prodottoRepository.findAll();
  }

  
  @PostMapping ("/inserimento_Prodotto")
  public @ResponseBody Prodotto insertP(Prodotto prodotto) {
    return prodottoRepository.save(prodotto);
  }
  
  
  @PostMapping ("/trova_Prodotto")
  public @ResponseBody  Prodotto getP(Long id) {
    return prodottoRepository.findById(id).orElseThrow(null);
  }
  
  @PostMapping ("/modifica_Prodotto")
  public @ResponseBody Prodotto modifyP(@RequestParam (value ="idP")Long id, Prodotto prodotto) {
    
    Prodotto prodottoToUpdate = getP(id);
    prodottoToUpdate.setNome(prodotto.getNome());
    prodottoToUpdate.setPrezzo(prodotto.getPrezzo());
    prodottoToUpdate.setQt(prodotto.getQt());
    prodottoToUpdate.setQm(prodotto.getQm());
    
    return prodottoRepository.save(prodottoToUpdate);
  }

  @PostMapping ("/cancella_Prodotto")
  public @ResponseBody String deleteP(@RequestParam (value ="idP")Long id) {
    prodottoRepository.deleteById(id);
    return "Prodotto eliminato";
  }
  
  
}